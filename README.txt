
Overview: The N-Puzzle is a common toy problem in artificial intelligence for the heuristic search technique. The solver uses the A* algorithm with the Manhattan Distance Heuristic to estimate the distance to a solved state. The program can solve 8-puzzle instances optimally (ie: making the absolute minimum number of moves required for a solution), however instances of the 15-puzzle and larger puzzles would require hours (or years) of computation time and would certainly exceed memory limits. Due to the combinatorial nature of the problem, there is a hard-coded limit in the number of search nodes: when the program reaches 100,000 explored nodes, the search terminates and returns one of the best solutions. Larger puzzles can be solved by providing  a heuristic multiplier for the search algorithm. The search algorithm can solve large puzzle instances using a heuristic multiplier, but the solution will no longer be optimal. For a more in-depth explanation of heuristic search, see “Artificial Intelligence, A Modern Approach,” by Stuart Russel and Peter Norvig, Chapter 3. 

To Use: If you would like to examine the source code for this project, download the “src” folder. Extract all the files and folders: the main method for the project is contained in the NPuzzleSolver.java class. If you would like to examine the program without downloading the source code, download the “Execution” folder. Within the Execution folder, double-click on the NPuzzle.jar file. This will open the front-end GUI for the program.
Notes on GUI: The Puzzle Dimension field refers to the N x N size of the puzzle. For example, entering 3 in this field would create a 3 x 3 puzzle (also known as an 8-puzzle). The Heuristic Multiplier refers to the “k*h(n)” multiplier in the heuristic evaluation of the search algorithm, (See Russel and Norvig for functional explanation). For larger puzzle sizes such as 5x5 and above, a good rule of thumb is to set the multiplier equal to the puzzle dimension. For example, a 5x5 puzzle should have a heuristic multiplier set to 5. When the specified arguments are entered, click “Generate and Solve Puzzle”. For larger puzzle sizes the program may hang for a few seconds as the search executes prior to drawing the visualization. 
